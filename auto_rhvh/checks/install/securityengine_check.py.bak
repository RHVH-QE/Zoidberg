import logging
import requests
import os
import time
import re
import paramiko
from fabric.api import settings, run
from ..helpers import CheckComm
from ..helpers.rhvm_api import RhevmAction
#from check_points import CheckPoints
import attr

log = logging.getLogger('bender')

@attr.s
class SecurityEngineCheck(CheckPoints):

    ##########################################
    # security_engine_check
    ##########################################


    def _get_host_cpu_type(self):
        log.info("Get host cpu type...")
        cmd = 'lscpu | grep "Model name"'
        ret = self._remotecmd.run_cmd(cmd, timeout=CONST.FABRIC_TIMEOUT)
        if ret[0]:
            if "AMD EPYC" in ret[1]:
                cpu_type = "AMD EPYC"
            elif "AMD" in ret[1]:
                cpu_type = "AMD Opteron G5"
            elif "Intel" in ret[1]:
                cpu_type = "Intel Nehalem Family"
            else:
                cpu_type = None
        else:
            cpu_type = None
        self._host_cpu_type = cpu_type
        log.info("Get host cpu type finished.")

    def _get_rhvm_fqdn(self):
        log.info("Get rhvm fqdn...")
        self._rhvm_fqdn = "bootp-73-199-228.lab.eng.pek2.redhat.com"
        log.info("Get rhvm fqdn finished.")

    def _gen_name(self):
        log.info("Generate dc name, cluster name, host name, storage domain name, VMs name...")
        mc_name = self._beaker_name.split('.')[0]
        # t = time.strftime("%Y-%m-%d-%H-%M-%S", time.localtime())
        # gen_name = mc_name + '-' + t
        gen_name = mc_name

        self._dc_name = gen_name
        self._cluster_name = gen_name
        self._host_name = gen_name
        self._sd_name = gen_name
        self._vm_name = gen_name

        log.info("Generate names finished.")

    def _get_host_ip(self, is_vlan, is_bond):
            log.info("Get host ip...")

            if not is_vlan and not is_bond:
                self._host_ip = self._host_string
                log.info("The host ip is: %s", self._host_ip)

            log.info("Get host ip finished.")

    
    def _add_host_to_rhvm(self, is_vlan=False, is_bond=False, is_local=False):
        log.info("Add host to rhvm...")
        # get rhvm fqdn
        self._get_rhvm_fqdn()
        if not self._rhvm_fqdn:
            return False
        # generate data center name, cluster name, host name
        self._gen_name()
        # get host ip, vlanid
        self._get_host_ip(is_vlan, is_bond)
        if not self._host_ip:
            return False
        if is_vlan and not self._host_vlanid:
            return False
        # get host cpu type
        self._get_host_cpu_type()
        if not self._host_cpu_type:
            return False

        log.info(
            "rhvm: %s, datacenter: %s, cluster_name: %s, host_name: %s, host_ip: %s, vlanid: %s, cpu_type: %s",
            self._rhvm_fqdn, self._dc_name, self._cluster_name,
            self._host_name, self._host_ip, self._host_vlanid,
            self._host_cpu_type)

        try:
            self._rhvm = RhevmAction(self._rhvm_fqdn)

            self._del_host_on_rhvm()

            log.info("Add datacenter %s", self._dc_name)
            if is_local:
                self._rhvm.add_datacenter(self._dc_name, is_local=True)
            else:
                self._rhvm.add_datacenter(self._dc_name)

            if is_vlan:
                log.info("Update network with vlan %s", self._host_vlanid)
                self._rhvm.update_network(self._dc_name, "vlan",
                                          self._host_vlanid)

            log.info("Add cluster %s", self._cluster_name)
            self._rhvm.add_cluster(self._dc_name, self._cluster_name,
                                   self._host_cpu_type)

            log.info("Add host %s", self._host_name)
            self._rhvm.add_host(self._host_ip, self._host_name, self._host_pass,
                                self._cluster_name)
        except Exception as e:
            log.error(e)
            return False

        log.info("Add host to rhvm finished.")
        return True

    def _del_host_on_rhvm(self):
        if not self._rhvm:
            return

        count = 0
        while (count < 3):
            try:
                if self._host_name:
                    host = self._rhvm.list_host(key="name", value=self._host_name)
                    if host and (host.get('status') == 'up' or host.get('status') == 'non_operational'):
                        log.info("Try to maintenance host %s", self._host_name)
                        self._rhvm.deactive_host(self._host_name)
                        time.sleep(10)

                existing_sd = self._rhvm.list_storage_domain(self._sd_name)
                if self._sd_name and existing_sd:
                    log.info("Try to remove storage domain %s", self._sd_name)
                    self._destory_sd_after_test(self._sd_name, self._host_name)

                if self._host_name:
                    log.info("Try to remove host %s", self._host_name)
                    self._rhvm.remove_host(self._host_name)
                    self._rhvm.del_host_events(self._host_name)
                
                if self._cluster_name:
                    log.info("Try to remove cluster %s", self._cluster_name)
                    self._rhvm.remove_cluster(self._cluster_name)

                if self._dc_name:
                    log.info("Try to remove data_center %s", self._dc_name)
                    self._rhvm.remove_datacenter(self._dc_name)
            except Exception as e:
                log.error(e)
                time.sleep(20)
                count = count + 1
            else:
                break



    def _active_host(self):
        log.info("Active host, please wait...")
        try:
            self._rhvm.active_host(self._host_name)
        except Exception as e:
            log.error(e)
            return False

        log.info("Active host finished.")
        return True


    def _check_openscap_config(self):
        cmd = "test -e {name} && grep 'configured = 1' {name}".format(name="/var/imgbased/openscap/config")
        ret = self._remotecmd.run_cmd(cmd, timeout=CONST.FABRIC_TIMEOUT)
        if not ret[0]:
            log.error("Failed to get /var/imgbased/openscap/config.")
            return False
        if "configured = 1" in ret[1]:
            log.info("Get /var/imgbased/openscap/config successfully.")
            return True
        log.error("Failed to get /var/imgbased/openscap/config. The result of '%s' is '%s'", cmd, ret[1])
        return False


   def _security_vdsm_check(self):
        log.info("In security mode, register rhvh via rhvm...")
        if not self._check_openscap_config():
            return False
        if not self._add_host_to_rhvm():
            return False
        if not self._check_host_status_on_rhvm():
            return False

        log.info("Register rhvh via rhvm with security profile selected finished.")
        return True
